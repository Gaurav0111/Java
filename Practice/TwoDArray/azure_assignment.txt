# Azure Assignment

## 1. Deploy Linux and Windows Virtual Machines (VMs) and Access Them Using SSH and RDP

### Linux VM Deployment and SSH Access
1. **Create a resource group:**
   ```sh
   az group create --name myResource --location westus
   ```

2. **Create a Linux VM:**
   ```sh
   az vm create \
     --resource-group myResource \
     --name myLinuxVM1 \
     --image UbuntuLTS \
     --admin-username gauravgarwal \
     --generate-ssh-keys
   ```

3. **Open port 22 for SSH:**
   ```sh
   az vm open-port --port 22 --resource-group myResource --name myLinuxVM1
   ```

4. **SSH into the Linux VM:**
   ```sh
   ssh gauravgarwal@<ip>
   ```

### Windows VM Deployment and RDP Access
1. **Create a Windows VM:**
   ```sh
   az vm create \
     --resource-group myResource \
     --name myWindowsVM \
     --image Win2019Datacenter \
     --admin-username gauravgarwal \
     --admin-password Password
   ```

2. **Open port 3389 for RDP:**
   ```sh
   az vm open-port --port 3389 --resource-group myResource --name myWindowsVM
   ```

3. **RDP into the Windows VM:**
   - Use an RDP client and connect to `<ip>` with the username `gauravgarwal` and password `Password`.

## 2. Create an App Service Plan

1. **Create an App Service Plan:**
   ```sh
   az appservice plan create --name backendapiPlan --resource-group myResource --sku FREE
   ```

## 3. Provision a Web App and Deploy a Simple Welcome Page

1. **Create a Web App:**
   ```sh
   az webapp create --resource-group myResource --plan backendapiPlan --name sampleApp
   ```

2. **Deploy a Simple Welcome Page:**
   ```sh
   echo "<html><body><h1>Welcome to my Web App!</h1></body></html>" > index.html
   az webapp deployment source config-local-git --name sampleApp --resource-group myResource
   git init
   git remote add azure $(az webapp deployment source config-local-git --name sampleApp --resource-group myResource --query url --output tsv)
   git add index.html
   git commit -m "Initial commit"
   git push azure master
   ```

## 4. Create Azure Container Registry (ACR) and Pull Image from ACR

1. **Create an ACR:**
   ```sh
   az acr create --resource-group myResource --name myDockerRegistry --sku Basic
   ```

2. **Log in to ACR:**
   ```sh
   az acr login --name myDockerRegistry
   ```

3. **Push an Image to ACR:**
   ```sh
   docker build -t backendapi .
   docker tag backendapi myDockerRegistry.azurecr.io/backendapi:v1
   docker push myDockerRegistry.azurecr.io/backendapi:v1
   ```

## 5. Create Container Instance and Deploy a Simple Docker Application

1. **Create a Container Instance:**
   ```sh
   az container create --resource-group myResource --name myContainerInstance --image myDockerRegistry.azurecr.io/backendapi:v1 --cpu 1 --memory 1 --registry-login-server myDockerRegistry.azurecr.io --registry-username <username> --registry-password <password>
   ```

## 6. Create Container Groups and Test Functionality

1. **Create a Container Group:**
   ```sh
   az container create --resource-group myResource --name myContainerGroup --image myDockerRegistry.azurecr.io/backendapi:v1 --cpu 1 --memory 1 --registry-login-server myDockerRegistry.azurecr.io --registry-username <username> --registry-password <password>
   ```

